
R version 2.13.1 (2011-07-08)
Copyright (C) 2011 The R Foundation for Statistical Computing
ISBN 3-900051-07-0
Platform: x86_64-apple-darwin9.8.0/x86_64 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> 
> ## when writing data into text file, it may use scientific format
> ## when you read it into c, and using atoi. it will make mistakes
> ## say 97000000 is written as 9.7e+07, and c think it is 9
> ## options("scipen") can control write out behavior
> 
> options(scipen=20)
> 
> # --------------------------------------------------------- 
> # organize the annotation in exon level
> # ---------------------------------------------------------
> 
> setwd("~/research/data/human/")
> 
> # --------------------------------------------------------- 
> # ensemble genes
> # ---------------------------------------------------------
> 
> ff  = "Homo_sapiens.GRCh37.66.exon.gtf"
> date()
[1] "Fri Apr 27 17:33:39 2012"
> inf = read.table(ff, sep="\t", as.is=TRUE, quote="")
> date()
[1] "Fri Apr 27 17:34:14 2012"
> 
> dim(inf)
[1] 1173711       9
> inf[1:2,]
     V1             V2   V3    V4    V5 V6 V7 V8
1 chr18 protein_coding exon 49501 49557  .  -  .
2 chr18 protein_coding exon 49129 49237  .  -  .
                                                                                                                                                                                V9
1  gene_id "ENSG00000173213"; transcript_id "ENST00000308911"; exon_number "1"; gene_name "RP11-683L23.1.1"; gene_biotype "protein_coding"; transcript_name "RP11-683L23.1.1-001";
2  gene_id "ENSG00000173213"; transcript_id "ENST00000308911"; exon_number "2"; gene_name "RP11-683L23.1.1"; gene_biotype "protein_coding"; transcript_name "RP11-683L23.1.1-001";
> 
> names(inf) = c("chr", "source", "feature", "start", "end", 
+ "score", "strand", "frame", "anno")
> 
> sort(table(inf$source))

                  disrupted_domain                    IG_J_pseudogene 
                                 1                                  3 
               misc_RNA_pseudogene                          TR_D_gene 
                                 3                                  3 
                   TR_J_pseudogene                    IG_C_pseudogene 
                                 4                                 13 
                  miRNA_pseudogene                          IG_J_gene 
                                15                                 18 
                         TR_C_gene                          IG_D_gene 
                                19                                 27 
                   TR_V_pseudogene                          IG_C_gene 
                                45                                 56 
          3prime_overlapping_ncrna                     non_stop_decay 
                                66                                 73 
                 snoRNA_pseudogene                   snRNA_pseudogene 
                                73                                 73 
                         TR_J_gene                                TEC 
                                74                                107 
                   tRNA_pseudogene                    rRNA_pseudogene 
                               128                                179 
                         TR_V_gene                    retrotransposed 
                               193                                211 
                     ambiguous_orf                    IG_V_pseudogene 
                               221                                223 
                         IG_V_gene                  sense_overlapping 
                               267                                279 
  transcribed_processed_pseudogene                         ncrna_host 
                               410                                493 
                              rRNA                 Mt_tRNA_pseudogene 
                               530                                580 
            polymorphic_pseudogene                   scRNA_pseudogene 
                               676                                787 
                        non_coding                 unitary_pseudogene 
                               808                               1055 
                    sense_intronic                           misc_RNA 
                              1110                               1187 
                        pseudogene                             snoRNA 
                              1253                               1521 
                             miRNA                              snRNA 
                              1756                               1944 
transcribed_unprocessed_pseudogene             unprocessed_pseudogene 
                              4305                               9350 
              processed_pseudogene                          antisense 
                             11086                              16709 
                           lincRNA                    retained_intron 
                             21542                              88609 
           nonsense_mediated_decay               processed_transcript 
                             92181                             138227 
                    protein_coding 
                            775218 
> table(inf$chr)

  chr1  chr10  chr11  chr12  chr13  chr14  chr15  chr16  chr17  chr18  chr19 
118073  47088  75880  75678  19347  45177  47846  55963  45801  10726  39682 
  chr2  chr20  chr21  chr22   chr3   chr4   chr5   chr6   chr7   chr8   chr9 
 92333  26669  14107  28853  76863  47845  55933  56052  60908  45686  45733 
  chrX   chrY 
 37651   3817 
> table(inf$feature)

   exon 
1173711 
> table(inf$score)

      . 
1173711 
> table(inf$strand)

     -      + 
578023 595688 
> table(inf$frame)

      . 
1173711 
> 
> # --------------------------------------------------------- 
> # whether any exon share the same start and end locations
> # ---------------------------------------------------------
> 
> id  = paste(inf$chr, inf$start, inf$end, sep=":")
> uid = unique(id)
> 
> length(id)
[1] 1173711
> length(uid)
[1] 533293
> 
> tid = table(id)
> table(tid)
tid
     1      2      3      4      5      6      7      8      9     10     11 
352036  54953  33697  25213  19184  13895   9648   7082   4928   3625   2485 
    12     13     14     15     16     17     18     19     20     21     22 
  1751   1229    958    696    514    314    259    166    161     87     70 
    23     24     25     26     27     28     29     30     31     32     33 
    66     55     58     20     11     20     13      6     14     16     19 
    34     35     36     37     38     39     40     41     42     43     45 
     7      4      3      6      1      5      2      3      3      2      1 
    50     52     53     58     60     61     71 
     1      1      1      1      1      1      1 
> sort(tid, decreasing=TRUE)[1:3]
id
chr16:57684165:57684263 chr14:21490551:21490656 chr14:21490221:21490341 
                     71                      61                      60 
> 
> # --------------------------------------------------------- 
> # sort the exons
> # ---------------------------------------------------------
> 
> od     = order(inf$chr, inf$start, inf$end)
> inf    = inf[od,]
> 
> # --------------------------------------------------------- 
> # obtain gene_id
> # --------------------------------------------------------- 
> 
> reg1   = regexpr('gene_id\\s"(\\S+)";', inf$anno, perl=TRUE)
> len1   = attributes(reg1)[[1]]
> nadd   = length(unlist(strsplit("gene_id", split=""))) + 2
> geneId = substr(inf$anno, reg1+nadd, reg1+len1-3)
> 
> # --------------------------------------------------------- 
> # obtain transcript_id
> # --------------------------------------------------------- 
> 
> reg1   = regexpr('transcript_id\\s"(\\S+)";', inf$anno, perl=TRUE)
> len1   = attributes(reg1)[[1]]
> nadd   = length(unlist(strsplit("transcript_id", split=""))) + 2
> tranId = substr(inf$anno, reg1+nadd, reg1+len1-3)
> 
> # --------------------------------------------------------- 
> # obtain gene_name
> # --------------------------------------------------------- 
> 
> reg1   = regexpr('gene_name\\s"(\\S+)";', inf$anno, perl=TRUE)
> len1   = attributes(reg1)[[1]]
> nadd   = length(unlist(strsplit("gene_name", split=""))) + 2
> geneNm = substr(inf$anno, reg1+nadd, reg1+len1-3)
> 
> # --------------------------------------------------------- 
> # obtain transcript_name
> # --------------------------------------------------------- 
> 
> reg1   = regexpr('transcript_name\\s"(\\S+)";', inf$anno, perl=TRUE)
> len1   = attributes(reg1)[[1]]
> nadd   = length(unlist(strsplit("transcript_name", split=""))) + 2
> tranNm = substr(inf$anno, reg1+nadd, reg1+len1-3)
> 
> # ---------------------------------------------------------
> # find those duplicated exons
> # ---------------------------------------------------------
> 
> nn = nrow(inf)
> nn
[1] 1173711
> 
> wSame = (inf$chr[-nn] == inf$chr[-1])
> wSame = wSame & (inf$start[-nn] == inf$start[-1])
> wSame = wSame & (inf$end[-nn] == inf$end[-1])
> 
> ## the last entry will never been dropped
> wSame = c(wSame, FALSE)
> length(wSame)
[1] 1173711
> 
> table(wSame)
wSame
 FALSE   TRUE 
533293 640418 
> 
> # ---------------------------------------------------------
> # collapse annoations for the deleted row
> # ---------------------------------------------------------
> 
> # suppose there are 6 records altogether, and 
> # the 4th and 5th records are the same
> # wSame = c(FALSE, FALSE, FALSE, TRUE, FALSE, FALSE)
> # so I want to combine the 4th and 5th records
> # rev(as.numeric(!wSame)) = (1 1 0 1 1 1)
> # cumsum(rev(as.numeric(!wSame))) = (1 2 2 3 4 5)
> # rev(cumsum(rev(as.numeric(!wSame)))) = (5 4 3 2 2 1)
> 
> id2kp      = rev(cumsum(rev(as.numeric(!wSame))))
> pasteUniqu = function(v){paste(unique(v),collapse=":")}
> geneId2use = tapply(geneId, id2kp, pasteUniqu)
> 
> if(!is.character(geneId2use)){
+   stop("I expecte geneID2use to be a character vector :(\n")
+ }
> 
> message("there are ", length(geneId2use), " unique exons.")
there are 533293 unique exons.
> 
> xx = grep(":", geneId2use)
> if(length(xx) > 0){
+   message(length(xx), " exons belong to more than one gene.")
+   geClusters = strsplit(geneId2use[xx], split=":")
+   t1         = table(sapply(geClusters, length))
+   message("their distributuion is")
+   print(t1)
+ }
4317 exons belong to more than one gene.
their distributuion is

   2    3    4    5    9   14   15   16   18 
4043  252   12    1    3    1    2    1    2 
> 
> tranId2use = tapply(tranId, id2kp, pasteUniqu)
> xx = grep(":", tranId2use)
> if(length(xx) > 0){
+   message(length(xx), " exons belong to more than one transcript.")
+   trClusters = strsplit(tranId2use[xx], split=":")
+   t1         = table(sapply(trClusters, length))
+   message("their distributuion is")
+   print(t1)
+ }
181257 exons belong to more than one transcript.
their distributuion is

    2     3     4     5     6     7     8     9    10    11    12    13    14 
54953 33697 25213 19184 13895  9648  7082  4928  3625  2485  1751  1229   958 
   15    16    17    18    19    20    21    22    23    24    25    26    27 
  696   514   314   259   166   161    87    70    66    55    58    20    11 
   28    29    30    31    32    33    34    35    36    37    38    39    40 
   20    13     6    14    16    19     7     4     3     6     1     5     2 
   41    42    43    45    50    52    53    58    60    61    71 
    3     3     2     1     1     1     1     1     1     1     1 
> 
> 
> geneNm2use = tapply(geneNm, id2kp, pasteUniqu)
> tranNm2use = tapply(tranNm, id2kp, pasteUniqu)
> 
> # ---------------------------------------------------------
> # drop duplicated exons
> # ---------------------------------------------------------
> 
> infNew = list()
> nms = names(inf)
> nms[1:8]
[1] "chr"     "source"  "feature" "start"   "end"     "score"   "strand" 
[8] "frame"  
> 
> for(i in 1:8){
+   nm1 = nms[i]  
+   cat(i, nm1, "\n")
+ 
+   if(nm1 == "source" || nm1 == "strand"){
+     it1 = tapply(inf[[nm1]], id2kp, pasteUniqu)
+   }else{
+     it1 = tapply(inf[[nm1]], id2kp, unique)
+   }
+   
+   if(mode(it1) == "list") { stop("hm... non unique ", nm1, "\n") }
+   
+   infNew[[nm1]] = it1
+ }
1 chr 
2 source 
3 feature 
4 start 
5 end 
6 score 
7 strand 
8 frame 
> 
> geneId2use = paste("gene_id \"", geneId2use, "\";", sep="")
> tranId2use = paste("transcript_id \"", tranId2use, "\";", sep="")
> geneNm2use = paste("gene_name \"", geneNm2use, "\";", sep="")
> tranNm2use = paste("transcript_name \"", tranNm2use, "\";", sep="")
> 
> infNew$anno = paste(geneId2use, tranId2use, geneNm2use, tranNm2use, sep=" ")
> 
> infNew = as.data.frame(infNew)
> dim(infNew)
[1] 533293      9
> infNew[1:2,]
   chr                 source feature    start      end score strand frame
1 chrY   processed_pseudogene    exon 59001391 59001635     .      +     .
2 chrY unprocessed_pseudogene    exon 28780670 28780799     .      -     .
                                                                                                             anno
1 gene_id "ENSG00000235857"; transcript_id "ENST00000431853"; gene_name "CTBP2P1"; transcript_name "CTBP2P1-001";
2 gene_id "ENSG00000237917"; transcript_id "ENST00000435945"; gene_name "PARP4P1"; transcript_name "PARP4P1-001";
> 
> # --------------------------------------------------------- 
> # sort the exons
> # ---------------------------------------------------------
> 
> od     = order(infNew$chr, infNew$start, infNew$end)
> any(diff(od) < 0)
[1] TRUE
> infNew = infNew[od,]
> 
> # ---------------------------------------------------------
> # write out
> # ---------------------------------------------------------
> 
> id  = paste(infNew$chr, infNew$start, infNew$end, sep=":")
> uid = unique(id)
> 
> length(id)
[1] 533293
> length(uid)
[1] 533293
> 
> write.table(infNew, file = "Homo_sapiens.GRCh37.66.unique.exon.gtf", 
+   append = FALSE, quote = FALSE, sep = "\t", row.names = FALSE, 
+   col.names = FALSE)
> 
> 
> proc.time()
   user  system elapsed 
392.417   7.022 399.768 
