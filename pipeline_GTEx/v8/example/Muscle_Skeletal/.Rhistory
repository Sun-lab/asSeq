library(xlsx)
install.packages(xlsx)
"xlsx"
install.packages("xlsx)
""
)
""
install.packages("xlsx")
library(xlsx)
source("http://bioconductor.org/biocLite.R")
biocLite()
install.packages("https://github.com/mikelove/crohns.git")
library(asSeq)
exit
q("no")
3664-2678
y = c(   22,   35,   71,  104,  116,  121, 176,
290,  245,  424,  533,  728,  709, 968,
1454, 2568, 5438, 5489, 7172, 8337,9740,
10523,13892,16755,18746,19721,17940,21808,
25601,26438,29514,32761)
x = 1:length(y)
glm1= glm(y~x, family=poisson(link="log"))
summary(glm1)
plot(x, log10(glm1$fitted), type="b", bty="n", xlab="day", ylab="#cases, log10",
main="new cases, poisson fit", col="red", ylim=c(1.4,4.5))
points(x, log10(y), col="black", pch=2)
legend("topleft", legend=c("observed","fitted","fitted,>100"),
text.col=c("black","red","goldenrod"),
col=c("black","red","goldenrod"), pch=c(2,1,3), bty="n")
y = y[-(1:3)]
x = 1:length(y)
glm2= glm(y~x, family=poisson(link="log"))
points(x+3, log10(glm2$fitted), pch=3, col="goldenrod")
y = c(   22,   35,   71,  104,  116,  121, 176,
290,  245,  424,  533,  728,  709, 968,
1454, 2568, 5438, 5489, 7172, 8337,9740,
10523,13892,16755,18746,19721,17940,21808,
25601,26438,29514,32761)
x = 1:length(y)
x2 = x*x
glm1= glm(y~x+x2, family=poisson(link="log"))
summary(glm1)
plot(x, log10(glm1$fitted), type="b", bty="n", xlab="day", ylab="#cases, log10",
main="new cases, poisson fit", col="red", ylim=c(1.4,5))
points(x, log10(y), col="black", pch=2)
legend("topleft", legend=c("observed","fitted","fitted,>100"),
text.col=c("black","red","goldenrod"),
col=c("black","red","goldenrod"), pch=c(2,1,3), bty="n")
y = y[-(1:3)]
x = 1:length(y)
x2 = x*x
glm2= glm(y~x+x2, family=poisson(link="log"))
points(x+3, log10(glm2$fitted), pch=3, col="goldenrod")
y = c(   22,   35,   71,  104,  116,  121, 176,
290,  245,  424,  533,  728,  709, 968,
1454, 2568, 5438, 5489, 7172, 8337,9740,
10523,13892,16755,18746,19721,17940,21808,
25601,26438,29514,32761)
x = 1:length(y)
x2 = x*x
glm1= glm(y~x+x2, family=poisson(link="log"))
summary(glm1)
plot(x, log10(glm1$fitted), type="b", bty="n", xlab="day", ylab="#cases, log10",
main="new cases, poisson fit", col="red", ylim=c(1.3,5))
points(x, log10(y), col="black", pch=2)
legend("topleft", legend=c("observed","fitted","fitted,>100"),
text.col=c("black","red","goldenrod"),
col=c("black","red","goldenrod"), pch=c(2,1,3), bty="n")
y = y[-(1:3)]
x = 1:length(y)
x2 = x*x
glm2= glm(y~x+x2, family=poisson(link="log"))
points(x+3, log10(glm2$fitted), pch=3, col="goldenrod")
y = c(   22,   35,   71,  104,  116,  121, 176,
290,  245,  424,  533,  728,  709, 968,
1454, 2568, 5438, 5489, 7172, 8337,9740,
10523,13892,16755,18746,19721,17940,21808,
25601,26438,29514,32761)
x = 1:length(y)
x2 = x*x
glm1= glm(y~x+x2, family=poisson(link="log"))
summary(glm1)
plot(x, log10(glm1$fitted), type="b", bty="n", xlab="day", ylab="#cases, log10",
main="new cases, poisson fit", col="red", ylim=c(1,5))
points(x, log10(y), col="black", pch=2)
legend("topleft", legend=c("observed","fitted","fitted,>100"),
text.col=c("black","red","goldenrod"),
col=c("black","red","goldenrod"), pch=c(2,1,3), bty="n")
y = y[-(1:3)]
x = 1:length(y)
x2 = x*x
glm2= glm(y~x+x2, family=poisson(link="log"))
points(x+3, log10(glm2$fitted), pch=3, col="goldenrod")
xprogn = 1:100
yprogn = glm1$coef[1]+glm1$coef[2]*xprong+glm1$coef[3]*xprogn^2
plot(xprogn, yprogn)
xprogn = 1:100
yprogn = glm1$coef[1]+glm1$coef[2]*xprogn+glm1$coef[3]*xprogn^2
plot(xprogn, yprogn)
xprogn = 1:40
yprogn = glm1$coef[1]+glm1$coef[2]*xprogn+glm1$coef[3]*xprogn^2
plot(xprogn, yprogn)
x
yprogn = exp(glm1$coef[1]+glm1$coef[2]*xprogn+glm1$coef[3]*xprogn^2)
plot(xprogn, yprogn)
summary(glm1)
glm1$coef[1]
glm1$coef[2]
glm1$coef[3]
yprogn = glm1$coef[1]+glm1$coef[2]*xprogn+glm1$coef[3]*xprogn^2
plot(xprogn, yprogn)
points(x, log10(y), col="black", pch=2)
predict(glm, xprogn)
newdata = data.frame(x=xprogn, x2=xprogn*xprogn)
predict(glm1, newdata=newdata)
plot(xprogn, yprogn)
vxprogn = 1:40
newdata = data.frame(x=xprogn, x2=xprogn*xprogn)
yprogn = predict(glm1, newdata=newdata)
#yprogn = glm1$coef[1]+glm1$coef[2]*xprogn+glm1$coef[3]*xprogn^2
plot(xprogn, yprogn)
points(x, log10(y), col="black", pch=2)
xprogn = 1:40
newdata = data.frame(x=xprogn, x2=xprogn*xprogn)
yprogn = predict(glm1, newdata=newdata)
#yprogn = glm1$coef[1]+glm1$coef[2]*xprogn+glm1$coef[3]*xprogn^2
plot(xprogn, yprogn)
points(x, log10(y), col="black", pch=2)
points(x, log(y), col="black", pch=2)
xprogn = 1:40
newdata = data.frame(x=xprogn, x2=xprogn*xprogn)
yprogn = predict(glm1, newdata=newdata)
#yprogn = glm1$coef[1]+glm1$coef[2]*xprogn+glm1$coef[3]*xprogn^2
plot(xprogn, yprogn)
points(x, log(y), col="black", pch=2)
xprogn = 1:40
newdata = data.frame(x=xprogn, x2=xprogn*xprogn)
yprogn = predict(glm1, newdata=newdata)
#yprogn = glm1$coef[1]+glm1$coef[2]*xprogn+glm1$coef[3]*xprogn^2
plot(xprogn, yprogn)
points(x, glm1$fitted, pch=2)
y = c(   22,   35,   71,  104,  116,  121, 176,
290,  245,  424,  533,  728,  709, 968,
1454, 2568, 5438, 5489, 7172, 8337,9740,
10523,13892,16755,18746,19721,17940,21808,
25601,26438,29514,32761)
x = 1:length(y)
y = c(   22,   35,   71,  104,  116,  121, 176,
290,  245,  424,  533,  728,  709, 968,
1454, 2568, 5438, 5489, 7172, 8337,9740,
10523,13892,16755,18746,19721,17940,21808,
25601,26438,29514,32761)
x = 1:length(y)
x2 = x*x
xprogn = 1:40
newdata = data.frame(x=xprogn, x2=xprogn*xprogn)
yprogn = predict(glm1, newdata=newdata)
#yprogn = glm1$coef[1]+glm1$coef[2]*xprogn+glm1$coef[3]*xprogn^2
plot(xprogn, yprogn)
points(x, glm1$fitted, pch=2)
points(x, log(y), col="black", pch=2)
points(x, glm1$fitted, pch=2, col="red")
points(x, glm1$fitted, pch=3, col="red")
glm1$fitted
plot(xprogn, yprogn)
points(x, log(glm1$fitted), pch=3, col="red")
points(x, log(y), col="black", pch=2)
q()
library(PCDimension)
library(nFactors)
library(MatrixEQTL)
getwd()
setwd("C:/Users/Vasyl/Documents/GitHub/asSeq/pipeline_GTEx/v8/example/Muscle_Skeletal")
args = c("9", "467", "1565691", "5e+05", "short")
args
chri = as.numeric(args[1])
nsub = as.numeric(args[2])
seedval = as.numeric(args[3])
cis_window = as.numeric(args[4])
model = args[5]
if(length(args)>5){
paral = as.numeric(args[6])
}else{
paral = 1e6
}
specf = "specifications.txt"
getwd()
getwd()
require("knitr")
opts_knit$set(root.dir = "C:/Users/Vasyl/Documents/GitHub/asSeq/pipeline_GTEx/v8/example/Muscle_Skeletal")
library(MatrixEQTL)
getwd()
Xmat[1:4,]
covar[1:4,]
suff0 = sprintf("%s_%s", chri, blocki)
blocki = 1
countjobs = 0
suff0 = sprintf("%s_%s", chri, blocki)
timout = sprintf("%s/time_%s.csv", perm.dir, suff0)
blocki = 1
countjobs = 0
suff0 = sprintf("%s_%s", chri, blocki)
timout = sprintf("%s/time_%s.csv", perm.dir, suff0)
blocki = 1
countjobs = 0
suff0 = sprintf("%s_%s", chri, blocki)
timout = sprintf("%s/time_%s.csv", perm.dir, suff0)
exprj = read.table(expression_file_name)
exprj = read.table(expression_file_name)
genepos$geneid
list.files()
require("knitr")
opts_knit$set(root.dir = "C:/Users/Vasyl/Documents/GitHub/asSeq/pipeline_GTEx/v8/example/Muscle_Skeletal")
opts_chunk$set(cache=TRUE, autodep = TRUE)
dep_auto()
args = c("9", "704", "1565691", "5e+05", "short", "1")
args
chri = as.numeric(args[1])
nsub = as.numeric(args[2])
seedval = as.numeric(args[3])
cis_window = as.numeric(args[4])
model = args[5]
if(length(args)>5){
paral = as.numeric(args[6])
}else{
paral = 1e6
}
specf = "specifications.txt"
getwd()
specs = unlist(read.table(specf, as.is=T))
specs
specs = unlist(read.table(specf, as.is=T))
specs
pref = specs[1]
nsam = specs[2]
queue = specs[3]
days = specs[4]
days = 2
bmem = as.numeric(specs[5])
mem = "4g"
if(length(specs)>20){
mem = specs[21]
}
mem
seedval = specs[13]
wrk.dir = specs[14]
lib.dir = specs[15]
bas.dir = specs[16]
eigenMTdir = specs[9]
rprog = specs[19];rprog
pyth = specs[20];pyth
setwd(wrk.dir)
wrk.dir
library(MatrixEQTL)
library(Matrix)
useModel = modelLINEAR;
source(sprintf("%s/helpers.R", lib.dir))
numpoints = 100
maf = 0.05
set.seed(seedval)
routdir = sprintf("%s/rout_%s", wrk.dir, pref)
boutdir = sprintf("%s/bout_%s", wrk.dir, pref)
if(!file.exists(routdir))dir.create(routdir)
if(!file.exists(boutdir))dir.create(boutdir)
int.dir = sprintf("%s_%s_%s", pref, nsub, cis_window)
cnt.dir = sprintf("%s_prepr", pref);cnt.dir;file.exists(cnt.dir)
out.dir = sprintf("oneperm_%s_%s_%s_%s", pref, nsub, cis_window, model)
perm.dir = sprintf("boot_%s_%s_%s_%s_%s", pref, nsub, cis_window, model, numpoints)
if(!file.exists(out.dir))dir.create(out.dir)
if(!file.exists(perm.dir))dir.create(perm.dir)
cmdi = sprintf("%s %s/eigenMT.py --CHROM %s --QTL %s --GEN %s --GENPOS %s --PHEPOS %s --OUT %s",
pyth, eigenMTdir, chri, output_file_name, SNP_file_name, snpspos_file_name,
genepos_file_name, output_file_name2)
require("knitr")
opts_knit$set(root.dir = "C:/Users/Vasyl/Documents/GitHub/asSeq/pipeline_GTEx/v8/example/Muscle_Skeletal")
opts_chunk$set(cache=TRUE, autodep = TRUE)
dep_auto()
getwd()
kp3 = (y/nperm)>=0     & (y/nperm)<=0.3
kp3a = (y/nperm)>0     & (y/nperm)<=0.3
y1 = -log10(y/nperm)
x1 = -log10(pvalb[,2])
glmi3 = glm(cbind(y[kp3],nperm-y[kp3])~x1[kp3], family="binomial")
#summary(glmi3)
lmi3 = lm(y1[kp3a]~x1[kp3a])
getwd()
setwd("C:/Users/Vasyl/Documents/GitHub/asSeq/pipeline_GTEx/v8/example/Muscle_Skeletal")
boots = read.csv(sprintf("%s/short_boot_pval_9_1.csv", perm.dir), as.is=T)
nperm = 1000
y = boots$permp*nperm
kp3 = (y/nperm)>=0     & (y/nperm)<=0.3
kp3a = (y/nperm)>0     & (y/nperm)<=0.3
y1 = -log10(y/nperm)
x1 = -log10(pvalb[,2])
glmi3 = glm(cbind(y[kp3],nperm-y[kp3])~x1[kp3], family="binomial")
summary(glmi3)
lmi3 = lm(y1[kp3a]~x1[kp3a])
plot(x1, y/nperm, xlab="-log10(boot p-val)", ylab="permutation p-val")
setwd("C:/Users/Vasyl/Documents/GitHub/asSeq/pipeline_GTEx/v8/example/Muscle_Skeletal")
perm.dir = "boot_Muscle_Skeletal_704_5e+05_short_100"
boots = read.csv(sprintf("%s/short_boot_pval_9_1.csv", perm.dir), as.is=T)
nperm = 1000
y = boots$permp*nperm
kp3 = (y/nperm)>=0     & (y/nperm)<=0.3
kp3a = (y/nperm)>0     & (y/nperm)<=0.3
y1 = -log10(y/nperm)
x1 = -log10(pvalb[,2])
glmi3 = glm(cbind(y[kp3],nperm-y[kp3])~x1[kp3], family="binomial")
summary(glmi3)
lmi3 = lm(y1[kp3a]~x1[kp3a])
plot(x1, y/nperm, xlab="-log10(boot p-val)", ylab="permutation p-val")
boots[1:2,]
y1
b1
x1
setwd("C:/Users/Vasyl/Documents/GitHub/asSeq/pipeline_GTEx/v8/example/Muscle_Skeletal")
perm.dir = "boot_Muscle_Skeletal_704_5e+05_short_100"
boots = read.csv(sprintf("%s/short_boot_pval_9_1.csv", perm.dir), as.is=T)
nperm = 1000
y = boots$permp*nperm
pvalb = boots$pvalb
kp3 = (y/nperm)>=0     & (y/nperm)<=0.3
kp3a = (y/nperm)>0     & (y/nperm)<=0.3
y1 = -log10(y/nperm)
x1 = -log10(pvalb[,2])
glmi3 = glm(cbind(y[kp3],nperm-y[kp3])~x1[kp3], family="binomial")
summary(glmi3)
lmi3 = lm(y1[kp3a]~x1[kp3a])
plot(x1, y/nperm, xlab="-log10(boot p-val)", ylab="permutation p-val")
setwd("C:/Users/Vasyl/Documents/GitHub/asSeq/pipeline_GTEx/v8/example/Muscle_Skeletal")
perm.dir = "boot_Muscle_Skeletal_704_5e+05_short_100"
boots = read.csv(sprintf("%s/short_boot_pval_9_1.csv", perm.dir), as.is=T)
nperm = 1000
y = boots$permp*nperm
pvalb = boots$pvalb
kp3 = (y/nperm)>=0     & (y/nperm)<=0.3
kp3a = (y/nperm)>0     & (y/nperm)<=0.3
y1 = -log10(y/nperm)
x1 = -log10(pvalb)
glmi3 = glm(cbind(y[kp3],nperm-y[kp3])~x1[kp3], family="binomial")
summary(glmi3)
lmi3 = lm(y1[kp3a]~x1[kp3a])
plot(x1, y/nperm, xlab="-log10(boot p-val)", ylab="permutation p-val")
setwd("C:/Users/Vasyl/Documents/GitHub/asSeq/pipeline_GTEx/v8/example/Muscle_Skeletal")
perm.dir = "boot_Muscle_Skeletal_704_5e+05_short_100"
boots = read.csv(sprintf("%s/short_boot_pval_9_1.csv", perm.dir), as.is=T)
nperm = 1000
y = boots$permp*nperm
pvalb = boots$pvalb
kp3 = (y/nperm)>=0     & (y/nperm)<=0.3
kp3a = (y/nperm)>0     & (y/nperm)<=0.3
y1 = -log10(y/nperm)
x1 = -log10(pvalb)
glmi3 = glm(cbind(y[kp3],nperm-y[kp3])~x1[kp3], family="binomial")
summary(glmi3)
lmi3 = lm(y1[kp3a]~x1[kp3a])
plot(x1, y/nperm, xlab="-log10(boot p-val)", ylab="permutation p-val")
fitted(glmi3)
setwd("C:/Users/Vasyl/Documents/GitHub/asSeq/pipeline_GTEx/v8/example/Muscle_Skeletal")
perm.dir = "boot_Muscle_Skeletal_704_5e+05_short_100"
boots = read.csv(sprintf("%s/short_boot_pval_9_1.csv", perm.dir), as.is=T)
nperm = 1000
y = boots$permp*nperm
pvalb = boots$pvalb
kp3 = (y/nperm)>=0     & (y/nperm)<=0.3
kp3a = (y/nperm)>0     & (y/nperm)<=0.3
y1 = log10(y/nperm)
x1 = log10(pvalb)
glmi3 = glm(cbind(y[kp3],nperm-y[kp3])~x1[kp3], family="binomial")
summary(glmi3)
lmi3 = lm(y1[kp3a]~x1[kp3a])
fitted(glmi3)
plot(x1, y/nperm, xlab="-log10(boot p-val)", ylab="permutation p-val", bty="n")
lines(x1, fitted(glmi3)
)
length(fitted(glmi3)
)
table(kp3)
lines(x1[kp3], fitted(glmi3))
plot(x1, y/nperm, xlab="-log10(boot p-val)", ylab="permutation p-val", bty="n")
o = order(x1[kp3])
xf = x[kp3]]
yf = fitted(glmi3)
lines(xf, yf)
plot(x1, y/nperm, xlab="-log10(boot p-val)", ylab="permutation p-val", bty="n")
o = order(x1[kp3])
xf = x[kp3][o]
yf = fitted(glmi3)
lines(xf, yf, col="red")
plot(x1, y/nperm, xlab="-log10(boot p-val)", ylab="permutation p-val", bty="n")
o = order(x1[kp3])
xf = x1[kp3][o]
yf = fitted(glmi3)
lines(xf, yf, col="red")
names(glmi3)
glmi3$fitted.values
plot(x1, y/nperm, xlab="-log10(boot p-val)", ylab="permutation p-val", bty="n")
o = order(x1[kp3])
xf = x1[kp3][o]
yf = glmi3$fitted.values[o]
lines(xf, yf, col="red")
plot(-x1, -log10(y/nperm), xlab="-log10(boot p-val)", ylab="permutation p-val", bty="n")
o = order(x1[kp3])
xf = x1[kp3][o]
yf = glmi3$fitted.values[o]
lines(-xf, -log10(yf), col="red")
plot(-x1, -log10(y/nperm), xlab="-log10(boot p-val)", ylab="permutation p-val", bty="n", main="perm.p vs min.p")
o = order(x1[kp3])
xf = x1[kp3][o]
yf = glmi3$fitted.values[o]
lines(-xf, -log10(yf), col="red")
fit
fitted
boots = read.csv(sprintf("%s/short_boot_pval_9_1.csv", perm.dir), as.is=T)
eigenMT = read.csv(sprintf("%s/upd_eigenMT_9_1.csv", out.dir), as.is=T)
eigenMT
setwd("C:/Users/Vasyl/Documents/GitHub/asSeq/pipeline_GTEx/v8/example/Muscle_Skeletal")
perm.dir = "boot_Muscle_Skeletal_704_5e+05_short_100"
out.dir = sprintf("oneperm_Muscle_Skeletal_704_5e+05_short")
boots = read.csv(sprintf("%s/short_boot_pval_9_1.csv", perm.dir), as.is=T)
eigenMT = read.csv(sprintf("%s/upd_eigenMT_9_1.csv", out.dir), as.is=T)
eigenMT
xval = log10(eigenMT$p.value)
pred.perm = logiti(glmi3$coef[1]+glmi3$coef[2]*xval)
c(xval, pred.perm)
logiti = function(x)1/(1+exp(-x))
setwd("C:/Users/Vasyl/Documents/GitHub/asSeq/pipeline_GTEx/v8/example/Muscle_Skeletal")
perm.dir = "boot_Muscle_Skeletal_704_5e+05_short_100"
out.dir = sprintf("oneperm_Muscle_Skeletal_704_5e+05_short")
boots = read.csv(sprintf("%s/short_boot_pval_9_1.csv", perm.dir), as.is=T)
eigenMT = read.csv(sprintf("%s/upd_eigenMT_9_1.csv", out.dir), as.is=T)
eigenMT
nperm = 1000
y = boots$permp*nperm
pvalb = boots$pvalb
kp3 = (y/nperm)>=0     & (y/nperm)<=0.3
kp3a = (y/nperm)>0     & (y/nperm)<=0.3
y1 = log10(y/nperm)
x1 = log10(pvalb)
glmi3 = glm(cbind(y[kp3],nperm-y[kp3])~x1[kp3], family="binomial")
summary(glmi3)
xval = log10(eigenMT$p.value)
pred.perm = logiti(glmi3$coef[1]+glmi3$coef[2]*xval)
c(xval, pred.perm)
xlim = -range(c(x1, xval))
xlim
pred.permp
pred.perm
range(-c(y/nperm, perd.perm))
range(-c(y/nperm, pred.perm))
ylim = range(-log10(y/nperm)
ylim
)
ylim = range(-log10(y/nperm))
ylim
xval = log10(eigenMT$p.value)
pred.perm = logiti(glmi3$coef[1]+glmi3$coef[2]*xval)
c(xval, pred.perm)
xlim = -range(-c(x1, xval))
ylim = range(-log10(y/nperm))
ylim[2] = -log10(pred.perm)
pred.perm = -log10()
plot(-x1, -log10(y/nperm), xlab="-log10(boot p-val)", ylab="permutation p-val", bty="n", main="perm.p vs min.p", xlim=xlim,ylim=ylim)
o = order(x1[kp3])
xf = x1[kp3][o]
yf = glmi3$fitted.values[o]
lines(-xf, -log10(yf), col="red")
xlim = range(-c(x1, xval))
ylim = range(-log10(y/nperm))
ylim[2] = -log10(pred.perm)
pred.perm = -log10()
plot(-x1, -log10(y/nperm), xlab="-log10(boot p-val)", ylab="permutation p-val", bty="n", main="perm.p vs min.p", xlim=xlim,ylim=ylim)
o = order(x1[kp3])
xf = x1[kp3][o]
yf = glmi3$fitted.values[o]
lines(-xf, -log10(yf), col="red")
xval
fit = seq(0, xval)
pred.perm = logiti(glmi3$coef[1]+glmi3$coef[2]*fit)
fit
fit = seq(0, xval, n=50)
fit
seq
fit = seq(0, xval, length.out=50)
fit
pred.perm = logiti(glmi3$coef[1]+glmi3$coef[2]*fit)
pred.perm
xval = log10(eigenMT$p.value)
pred.perm = logiti(glmi3$coef[1]+glmi3$coef[2]*xval)
c(xval, pred.perm)
xlim = range(-c(x1, xval))
ylim = range(-log10(y/nperm))
ylim[2] = -log10(pred.perm)
plot(-x1, -log10(y/nperm), xlab="-log10(boot p-val)", ylab="permutation p-val", bty="n", main="perm.p vs min.p")
o = order(x1[kp3])
xf = x1[kp3][o]
yf = glmi3$fitted.values[o]
lines(-xf, -log10(yf), col="red")
fit = seq(0, xval, length.out=50)
pred.perm0 = logiti(glmi3$coef[1]+glmi3$coef[2]*fit)
plot(-fiot, -log10(pred.perm0), xlab="-log10(boot p-val)", ylab="permutation p-val", bty="n", main="with prediction", xlim=xlim,ylim=ylim)
plot(-fit, -log10(pred.perm0), xlab="-log10(boot p-val)", ylab="permutation p-val", bty="n", main="with prediction", xlim=xlim,ylim=ylim)
fit = seq(0, xval, length.out=50)
pred.perm0 = logiti(glmi3$coef[1]+glmi3$coef[2]*fit)
plot(-x1, -log10(y/nperm), xlab="-log10(boot p-val)", ylab="permutation p-val", bty="n", main="perm.p vs min.p", xlim=xlim,ylim=ylim)
lines(-fit, -log10(pred.perm0), col="red")
point(-xval, -log10(pred.perm), col="blue", cex=2)
points(-xval, -log10(pred.perm), col="blue", cex=2)
points(-xval, -log10(pred.perm), col="blue", cex=1.5, pch=19)
eigenMT$p.value/pred.perm
pred.perm/eigenMT$p.value
