// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// Rcpp_norm
double Rcpp_norm(const arma::vec& a);
RcppExport SEXP _asSeq2_Rcpp_norm(SEXP aSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type a(aSEXP);
    rcpp_result_gen = Rcpp::wrap(Rcpp_norm(a));
    return rcpp_result_gen;
END_RCPP
}
// Rcpp_logSumExp
double Rcpp_logSumExp(const arma::vec& log_x);
RcppExport SEXP _asSeq2_Rcpp_logSumExp(SEXP log_xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type log_x(log_xSEXP);
    rcpp_result_gen = Rcpp::wrap(Rcpp_logSumExp(log_x));
    return rcpp_result_gen;
END_RCPP
}
// Rcpp_min_diff
double Rcpp_min_diff(const arma::vec& x);
RcppExport SEXP _asSeq2_Rcpp_min_diff(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(Rcpp_min_diff(x));
    return rcpp_result_gen;
END_RCPP
}
// Rcpp_lgy_add_1
arma::vec Rcpp_lgy_add_1(const arma::vec& y);
RcppExport SEXP _asSeq2_Rcpp_lgy_add_1(SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(Rcpp_lgy_add_1(y));
    return rcpp_result_gen;
END_RCPP
}
// compute_offset
void compute_offset(const double& bxj, const arma::vec& z, arma::vec& offsets);
RcppExport SEXP _asSeq2_compute_offset(SEXP bxjSEXP, SEXP zSEXP, SEXP offsetsSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const double& >::type bxj(bxjSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type z(zSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type offsets(offsetsSEXP);
    compute_offset(bxj, z, offsets);
    return R_NilValue;
END_RCPP
}
// Rcpp_loglikNB
double Rcpp_loglikNB(const double& phi, const arma::vec& mu1, const arma::vec& y, const arma::vec& lgy1);
RcppExport SEXP _asSeq2_Rcpp_loglikNB(SEXP phiSEXP, SEXP mu1SEXP, SEXP ySEXP, SEXP lgy1SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const double& >::type phi(phiSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type mu1(mu1SEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type lgy1(lgy1SEXP);
    rcpp_result_gen = Rcpp::wrap(Rcpp_loglikNB(phi, mu1, y, lgy1));
    return rcpp_result_gen;
END_RCPP
}
// Rcpp_loglikNB_bxj
double Rcpp_loglikNB_bxj(const double& phi, const arma::vec& mu1, const arma::vec& y, const arma::vec& lgy1);
RcppExport SEXP _asSeq2_Rcpp_loglikNB_bxj(SEXP phiSEXP, SEXP mu1SEXP, SEXP ySEXP, SEXP lgy1SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const double& >::type phi(phiSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type mu1(mu1SEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type lgy1(lgy1SEXP);
    rcpp_result_gen = Rcpp::wrap(Rcpp_loglikNB_bxj(phi, mu1, y, lgy1));
    return rcpp_result_gen;
END_RCPP
}
// Rcpp_loglik_pois
double Rcpp_loglik_pois(const arma::vec& mu1, const arma::vec& y, const arma::vec& lgy1);
RcppExport SEXP _asSeq2_Rcpp_loglik_pois(SEXP mu1SEXP, SEXP ySEXP, SEXP lgy1SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type mu1(mu1SEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type lgy1(lgy1SEXP);
    rcpp_result_gen = Rcpp::wrap(Rcpp_loglik_pois(mu1, y, lgy1));
    return rcpp_result_gen;
END_RCPP
}
// Rcpp_logLTReC
double Rcpp_logLTReC(const double& bxj, const arma::vec& y, const arma::mat& X, const arma::vec& z, const arma::vec& BETA, const double& phi, const bool& fam_nb, const arma::vec& lgy1, arma::vec& mu);
RcppExport SEXP _asSeq2_Rcpp_logLTReC(SEXP bxjSEXP, SEXP ySEXP, SEXP XSEXP, SEXP zSEXP, SEXP BETASEXP, SEXP phiSEXP, SEXP fam_nbSEXP, SEXP lgy1SEXP, SEXP muSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const double& >::type bxj(bxjSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type z(zSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type BETA(BETASEXP);
    Rcpp::traits::input_parameter< const double& >::type phi(phiSEXP);
    Rcpp::traits::input_parameter< const bool& >::type fam_nb(fam_nbSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type lgy1(lgy1SEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type mu(muSEXP);
    rcpp_result_gen = Rcpp::wrap(Rcpp_logLTReC(bxj, y, X, z, BETA, phi, fam_nb, lgy1, mu));
    return rcpp_result_gen;
END_RCPP
}
// Rcpp_logLTReC_bxj
double Rcpp_logLTReC_bxj(const double& bxj, const arma::vec& y, const arma::mat& X, const arma::vec& z, const arma::vec& BETA, const double& phi, const bool& fam_nb, const arma::vec& lgy1, arma::vec& mu);
RcppExport SEXP _asSeq2_Rcpp_logLTReC_bxj(SEXP bxjSEXP, SEXP ySEXP, SEXP XSEXP, SEXP zSEXP, SEXP BETASEXP, SEXP phiSEXP, SEXP fam_nbSEXP, SEXP lgy1SEXP, SEXP muSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const double& >::type bxj(bxjSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type z(zSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type BETA(BETASEXP);
    Rcpp::traits::input_parameter< const double& >::type phi(phiSEXP);
    Rcpp::traits::input_parameter< const bool& >::type fam_nb(fam_nbSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type lgy1(lgy1SEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type mu(muSEXP);
    rcpp_result_gen = Rcpp::wrap(Rcpp_logLTReC_bxj(bxj, y, X, z, BETA, phi, fam_nb, lgy1, mu));
    return rcpp_result_gen;
END_RCPP
}
// Rcpp_grad_hess_bxj_trec
arma::vec Rcpp_grad_hess_bxj_trec(const double& bxj, const arma::vec& y, const arma::vec& z, const arma::vec& mu, const double& phi, const bool& fam_nb);
RcppExport SEXP _asSeq2_Rcpp_grad_hess_bxj_trec(SEXP bxjSEXP, SEXP ySEXP, SEXP zSEXP, SEXP muSEXP, SEXP phiSEXP, SEXP fam_nbSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const double& >::type bxj(bxjSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type z(zSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type mu(muSEXP);
    Rcpp::traits::input_parameter< const double& >::type phi(phiSEXP);
    Rcpp::traits::input_parameter< const bool& >::type fam_nb(fam_nbSEXP);
    rcpp_result_gen = Rcpp::wrap(Rcpp_grad_hess_bxj_trec(bxj, y, z, mu, phi, fam_nb));
    return rcpp_result_gen;
END_RCPP
}
// Rcpp_trec_grad_bxj
double Rcpp_trec_grad_bxj(const double& bxj, const arma::vec& y, const arma::vec& z, const arma::vec& mu, const double& phi, const bool& fam_nb);
RcppExport SEXP _asSeq2_Rcpp_trec_grad_bxj(SEXP bxjSEXP, SEXP ySEXP, SEXP zSEXP, SEXP muSEXP, SEXP phiSEXP, SEXP fam_nbSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const double& >::type bxj(bxjSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type z(zSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type mu(muSEXP);
    Rcpp::traits::input_parameter< const double& >::type phi(phiSEXP);
    Rcpp::traits::input_parameter< const bool& >::type fam_nb(fam_nbSEXP);
    rcpp_result_gen = Rcpp::wrap(Rcpp_trec_grad_bxj(bxj, y, z, mu, phi, fam_nb));
    return rcpp_result_gen;
END_RCPP
}
// Rcpp_trec_bxj_BFGS
Rcpp::List Rcpp_trec_bxj_BFGS(const double& bxj0, const arma::vec& y, const arma::mat& X, const arma::vec& z, const arma::vec& BETA, double& phi, const bool& fam_nb, const arma::vec& lgy1, const arma::uword& max_iter, const double& eps, const bool& show);
RcppExport SEXP _asSeq2_Rcpp_trec_bxj_BFGS(SEXP bxj0SEXP, SEXP ySEXP, SEXP XSEXP, SEXP zSEXP, SEXP BETASEXP, SEXP phiSEXP, SEXP fam_nbSEXP, SEXP lgy1SEXP, SEXP max_iterSEXP, SEXP epsSEXP, SEXP showSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const double& >::type bxj0(bxj0SEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type z(zSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type BETA(BETASEXP);
    Rcpp::traits::input_parameter< double& >::type phi(phiSEXP);
    Rcpp::traits::input_parameter< const bool& >::type fam_nb(fam_nbSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type lgy1(lgy1SEXP);
    Rcpp::traits::input_parameter< const arma::uword& >::type max_iter(max_iterSEXP);
    Rcpp::traits::input_parameter< const double& >::type eps(epsSEXP);
    Rcpp::traits::input_parameter< const bool& >::type show(showSEXP);
    rcpp_result_gen = Rcpp::wrap(Rcpp_trec_bxj_BFGS(bxj0, y, X, z, BETA, phi, fam_nb, lgy1, max_iter, eps, show));
    return rcpp_result_gen;
END_RCPP
}
// Rcpp_trec_bxj
Rcpp::List Rcpp_trec_bxj(const arma::vec& y, const arma::mat& X, const double& bxj, const arma::vec& z, const arma::vec& BETA, double& phi, const bool& fam_nb, const arma::vec& lgy1, const arma::uword& max_iter, const double& eps, const bool& show);
RcppExport SEXP _asSeq2_Rcpp_trec_bxj(SEXP ySEXP, SEXP XSEXP, SEXP bxjSEXP, SEXP zSEXP, SEXP BETASEXP, SEXP phiSEXP, SEXP fam_nbSEXP, SEXP lgy1SEXP, SEXP max_iterSEXP, SEXP epsSEXP, SEXP showSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const double& >::type bxj(bxjSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type z(zSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type BETA(BETASEXP);
    Rcpp::traits::input_parameter< double& >::type phi(phiSEXP);
    Rcpp::traits::input_parameter< const bool& >::type fam_nb(fam_nbSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type lgy1(lgy1SEXP);
    Rcpp::traits::input_parameter< const arma::uword& >::type max_iter(max_iterSEXP);
    Rcpp::traits::input_parameter< const double& >::type eps(epsSEXP);
    Rcpp::traits::input_parameter< const bool& >::type show(showSEXP);
    rcpp_result_gen = Rcpp::wrap(Rcpp_trec_bxj(y, X, bxj, z, BETA, phi, fam_nb, lgy1, max_iter, eps, show));
    return rcpp_result_gen;
END_RCPP
}
// Rcpp_NB_reg_LL
double Rcpp_NB_reg_LL(const arma::vec& y, const arma::mat& X, const arma::vec& offsets, const arma::vec& PARAMS, const arma::vec& lgy1, arma::vec& mu);
RcppExport SEXP _asSeq2_Rcpp_NB_reg_LL(SEXP ySEXP, SEXP XSEXP, SEXP offsetsSEXP, SEXP PARAMSSEXP, SEXP lgy1SEXP, SEXP muSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type offsets(offsetsSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type PARAMS(PARAMSSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type lgy1(lgy1SEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type mu(muSEXP);
    rcpp_result_gen = Rcpp::wrap(Rcpp_NB_reg_LL(y, X, offsets, PARAMS, lgy1, mu));
    return rcpp_result_gen;
END_RCPP
}
// Rcpp_NB_reg_grad
arma::vec Rcpp_NB_reg_grad(const arma::vec& y, const arma::mat& X, const arma::vec& mu, const arma::vec& PARAMS);
RcppExport SEXP _asSeq2_Rcpp_NB_reg_grad(SEXP ySEXP, SEXP XSEXP, SEXP muSEXP, SEXP PARAMSSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type mu(muSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type PARAMS(PARAMSSEXP);
    rcpp_result_gen = Rcpp::wrap(Rcpp_NB_reg_grad(y, X, mu, PARAMS));
    return rcpp_result_gen;
END_RCPP
}
// Rcpp_NB_reg_Hess
arma::mat Rcpp_NB_reg_Hess(const arma::vec& y, const arma::mat& X, const arma::vec& mu, const arma::vec& PARAMS);
RcppExport SEXP _asSeq2_Rcpp_NB_reg_Hess(SEXP ySEXP, SEXP XSEXP, SEXP muSEXP, SEXP PARAMSSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type mu(muSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type PARAMS(PARAMSSEXP);
    rcpp_result_gen = Rcpp::wrap(Rcpp_NB_reg_Hess(y, X, mu, PARAMS));
    return rcpp_result_gen;
END_RCPP
}
// Rcpp_pois_reg_LL
double Rcpp_pois_reg_LL(const arma::vec& y, const arma::mat& X, const arma::vec& offsets, const arma::vec& PARAMS, const arma::vec& lgy1, arma::vec& mu);
RcppExport SEXP _asSeq2_Rcpp_pois_reg_LL(SEXP ySEXP, SEXP XSEXP, SEXP offsetsSEXP, SEXP PARAMSSEXP, SEXP lgy1SEXP, SEXP muSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type offsets(offsetsSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type PARAMS(PARAMSSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type lgy1(lgy1SEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type mu(muSEXP);
    rcpp_result_gen = Rcpp::wrap(Rcpp_pois_reg_LL(y, X, offsets, PARAMS, lgy1, mu));
    return rcpp_result_gen;
END_RCPP
}
// Rcpp_pois_reg_grad
arma::vec Rcpp_pois_reg_grad(const arma::vec& y, const arma::mat& X, const arma::vec& mu, const arma::vec& PARAMS);
RcppExport SEXP _asSeq2_Rcpp_pois_reg_grad(SEXP ySEXP, SEXP XSEXP, SEXP muSEXP, SEXP PARAMSSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type mu(muSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type PARAMS(PARAMSSEXP);
    rcpp_result_gen = Rcpp::wrap(Rcpp_pois_reg_grad(y, X, mu, PARAMS));
    return rcpp_result_gen;
END_RCPP
}
// Rcpp_pois_reg_Hess
arma::mat Rcpp_pois_reg_Hess(const arma::vec& y, const arma::mat& X, const arma::vec& mu, const arma::vec& PARAMS);
RcppExport SEXP _asSeq2_Rcpp_pois_reg_Hess(SEXP ySEXP, SEXP XSEXP, SEXP muSEXP, SEXP PARAMSSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type mu(muSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type PARAMS(PARAMSSEXP);
    rcpp_result_gen = Rcpp::wrap(Rcpp_pois_reg_Hess(y, X, mu, PARAMS));
    return rcpp_result_gen;
END_RCPP
}
// Rcpp_reg_LL
double Rcpp_reg_LL(const arma::vec& y, const arma::mat& X, const arma::vec& offsets, const arma::vec& PARAMS, const bool& fam_nb, const arma::vec& lgy1, arma::vec& mu);
RcppExport SEXP _asSeq2_Rcpp_reg_LL(SEXP ySEXP, SEXP XSEXP, SEXP offsetsSEXP, SEXP PARAMSSEXP, SEXP fam_nbSEXP, SEXP lgy1SEXP, SEXP muSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type offsets(offsetsSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type PARAMS(PARAMSSEXP);
    Rcpp::traits::input_parameter< const bool& >::type fam_nb(fam_nbSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type lgy1(lgy1SEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type mu(muSEXP);
    rcpp_result_gen = Rcpp::wrap(Rcpp_reg_LL(y, X, offsets, PARAMS, fam_nb, lgy1, mu));
    return rcpp_result_gen;
END_RCPP
}
// Rcpp_reg_grad
arma::vec Rcpp_reg_grad(const arma::vec& y, const arma::mat& X, const arma::vec& mu, const arma::vec& PARAMS, const bool& fam_nb);
RcppExport SEXP _asSeq2_Rcpp_reg_grad(SEXP ySEXP, SEXP XSEXP, SEXP muSEXP, SEXP PARAMSSEXP, SEXP fam_nbSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type mu(muSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type PARAMS(PARAMSSEXP);
    Rcpp::traits::input_parameter< const bool& >::type fam_nb(fam_nbSEXP);
    rcpp_result_gen = Rcpp::wrap(Rcpp_reg_grad(y, X, mu, PARAMS, fam_nb));
    return rcpp_result_gen;
END_RCPP
}
// Rcpp_reg_Hess
arma::mat Rcpp_reg_Hess(const arma::vec& y, const arma::mat& X, const arma::vec& mu, const arma::vec& PARAMS, const bool& fam_nb);
RcppExport SEXP _asSeq2_Rcpp_reg_Hess(SEXP ySEXP, SEXP XSEXP, SEXP muSEXP, SEXP PARAMSSEXP, SEXP fam_nbSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type mu(muSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type PARAMS(PARAMSSEXP);
    Rcpp::traits::input_parameter< const bool& >::type fam_nb(fam_nbSEXP);
    rcpp_result_gen = Rcpp::wrap(Rcpp_reg_Hess(y, X, mu, PARAMS, fam_nb));
    return rcpp_result_gen;
END_RCPP
}
// Rcpp_reg
Rcpp::List Rcpp_reg(const arma::vec& y, const arma::mat& X, const arma::vec& offsets, const arma::vec& params0, const bool& fam_nb, const arma::vec& lgy1, const arma::uword& max_iter, const double& eps, const bool& show);
RcppExport SEXP _asSeq2_Rcpp_reg(SEXP ySEXP, SEXP XSEXP, SEXP offsetsSEXP, SEXP params0SEXP, SEXP fam_nbSEXP, SEXP lgy1SEXP, SEXP max_iterSEXP, SEXP epsSEXP, SEXP showSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type offsets(offsetsSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type params0(params0SEXP);
    Rcpp::traits::input_parameter< const bool& >::type fam_nb(fam_nbSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type lgy1(lgy1SEXP);
    Rcpp::traits::input_parameter< const arma::uword& >::type max_iter(max_iterSEXP);
    Rcpp::traits::input_parameter< const double& >::type eps(epsSEXP);
    Rcpp::traits::input_parameter< const bool& >::type show(showSEXP);
    rcpp_result_gen = Rcpp::wrap(Rcpp_reg(y, X, offsets, params0, fam_nb, lgy1, max_iter, eps, show));
    return rcpp_result_gen;
END_RCPP
}
// Rcpp_reg_BFGS
Rcpp::List Rcpp_reg_BFGS(const arma::vec& y, const arma::mat& X, const arma::vec& offsets, const arma::vec& params0, const bool& fam_nb, const arma::vec& lgy1, const arma::uword& max_iter, const double& eps, const bool& show);
RcppExport SEXP _asSeq2_Rcpp_reg_BFGS(SEXP ySEXP, SEXP XSEXP, SEXP offsetsSEXP, SEXP params0SEXP, SEXP fam_nbSEXP, SEXP lgy1SEXP, SEXP max_iterSEXP, SEXP epsSEXP, SEXP showSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type offsets(offsetsSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type params0(params0SEXP);
    Rcpp::traits::input_parameter< const bool& >::type fam_nb(fam_nbSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type lgy1(lgy1SEXP);
    Rcpp::traits::input_parameter< const arma::uword& >::type max_iter(max_iterSEXP);
    Rcpp::traits::input_parameter< const double& >::type eps(epsSEXP);
    Rcpp::traits::input_parameter< const bool& >::type show(showSEXP);
    rcpp_result_gen = Rcpp::wrap(Rcpp_reg_BFGS(y, X, offsets, params0, fam_nb, lgy1, max_iter, eps, show));
    return rcpp_result_gen;
END_RCPP
}
// Rcpp_trec
Rcpp::List Rcpp_trec(const arma::vec& y, const arma::mat& X, const arma::vec& z, const bool& fam_nb, const arma::vec& lgy1, const double& ini_bxj, const double& LL_null, Rcpp::Nullable<Rcpp::NumericVector> ini_reg_par, const arma::uword& max_iter, const double& eps, const bool& show);
RcppExport SEXP _asSeq2_Rcpp_trec(SEXP ySEXP, SEXP XSEXP, SEXP zSEXP, SEXP fam_nbSEXP, SEXP lgy1SEXP, SEXP ini_bxjSEXP, SEXP LL_nullSEXP, SEXP ini_reg_parSEXP, SEXP max_iterSEXP, SEXP epsSEXP, SEXP showSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type z(zSEXP);
    Rcpp::traits::input_parameter< const bool& >::type fam_nb(fam_nbSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type lgy1(lgy1SEXP);
    Rcpp::traits::input_parameter< const double& >::type ini_bxj(ini_bxjSEXP);
    Rcpp::traits::input_parameter< const double& >::type LL_null(LL_nullSEXP);
    Rcpp::traits::input_parameter< Rcpp::Nullable<Rcpp::NumericVector> >::type ini_reg_par(ini_reg_parSEXP);
    Rcpp::traits::input_parameter< const arma::uword& >::type max_iter(max_iterSEXP);
    Rcpp::traits::input_parameter< const double& >::type eps(epsSEXP);
    Rcpp::traits::input_parameter< const bool& >::type show(showSEXP);
    rcpp_result_gen = Rcpp::wrap(Rcpp_trec(y, X, z, fam_nb, lgy1, ini_bxj, LL_null, ini_reg_par, max_iter, eps, show));
    return rcpp_result_gen;
END_RCPP
}
// Rcpp_loglikBB
double Rcpp_loglikBB(const arma::vec& ni, const arma::vec& ni0, const double& bxj, const double& log_theta, const arma::vec& lbc, const arma::vec& zeta);
RcppExport SEXP _asSeq2_Rcpp_loglikBB(SEXP niSEXP, SEXP ni0SEXP, SEXP bxjSEXP, SEXP log_thetaSEXP, SEXP lbcSEXP, SEXP zetaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type ni(niSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type ni0(ni0SEXP);
    Rcpp::traits::input_parameter< const double& >::type bxj(bxjSEXP);
    Rcpp::traits::input_parameter< const double& >::type log_theta(log_thetaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type lbc(lbcSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type zeta(zetaSEXP);
    rcpp_result_gen = Rcpp::wrap(Rcpp_loglikBB(ni, ni0, bxj, log_theta, lbc, zeta));
    return rcpp_result_gen;
END_RCPP
}
// Rcpp_loglikBB_Pi
double Rcpp_loglikBB_Pi(const arma::vec& ni, const arma::vec& ni0, const double& bxj, const double& log_theta, const arma::vec& lbc, const arma::vec& zeta);
RcppExport SEXP _asSeq2_Rcpp_loglikBB_Pi(SEXP niSEXP, SEXP ni0SEXP, SEXP bxjSEXP, SEXP log_thetaSEXP, SEXP lbcSEXP, SEXP zetaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type ni(niSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type ni0(ni0SEXP);
    Rcpp::traits::input_parameter< const double& >::type bxj(bxjSEXP);
    Rcpp::traits::input_parameter< const double& >::type log_theta(log_thetaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type lbc(lbcSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type zeta(zetaSEXP);
    rcpp_result_gen = Rcpp::wrap(Rcpp_loglikBB_Pi(ni, ni0, bxj, log_theta, lbc, zeta));
    return rcpp_result_gen;
END_RCPP
}
// Rcpp_ase_grad
arma::vec Rcpp_ase_grad(const arma::vec& ni, const arma::vec& ni0, const double& bxj, const double& log_theta, const arma::vec& zeta);
RcppExport SEXP _asSeq2_Rcpp_ase_grad(SEXP niSEXP, SEXP ni0SEXP, SEXP bxjSEXP, SEXP log_thetaSEXP, SEXP zetaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type ni(niSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type ni0(ni0SEXP);
    Rcpp::traits::input_parameter< const double& >::type bxj(bxjSEXP);
    Rcpp::traits::input_parameter< const double& >::type log_theta(log_thetaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type zeta(zetaSEXP);
    rcpp_result_gen = Rcpp::wrap(Rcpp_ase_grad(ni, ni0, bxj, log_theta, zeta));
    return rcpp_result_gen;
END_RCPP
}
// Rcpp_ase_grad_Pi
double Rcpp_ase_grad_Pi(const arma::vec& ni, const arma::vec& ni0, const double& bxj, const double& log_theta, const arma::vec& zeta);
RcppExport SEXP _asSeq2_Rcpp_ase_grad_Pi(SEXP niSEXP, SEXP ni0SEXP, SEXP bxjSEXP, SEXP log_thetaSEXP, SEXP zetaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type ni(niSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type ni0(ni0SEXP);
    Rcpp::traits::input_parameter< const double& >::type bxj(bxjSEXP);
    Rcpp::traits::input_parameter< const double& >::type log_theta(log_thetaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type zeta(zetaSEXP);
    rcpp_result_gen = Rcpp::wrap(Rcpp_ase_grad_Pi(ni, ni0, bxj, log_theta, zeta));
    return rcpp_result_gen;
END_RCPP
}
// Rcpp_ase_grad_H0
double Rcpp_ase_grad_H0(const arma::vec& ni, const arma::vec& ni0, const double& bxj, const double& log_theta, const arma::vec& zeta);
RcppExport SEXP _asSeq2_Rcpp_ase_grad_H0(SEXP niSEXP, SEXP ni0SEXP, SEXP bxjSEXP, SEXP log_thetaSEXP, SEXP zetaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type ni(niSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type ni0(ni0SEXP);
    Rcpp::traits::input_parameter< const double& >::type bxj(bxjSEXP);
    Rcpp::traits::input_parameter< const double& >::type log_theta(log_thetaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type zeta(zetaSEXP);
    rcpp_result_gen = Rcpp::wrap(Rcpp_ase_grad_H0(ni, ni0, bxj, log_theta, zeta));
    return rcpp_result_gen;
END_RCPP
}
// Rcpp_ase_Pi_BFGS
Rcpp::List Rcpp_ase_Pi_BFGS(const arma::vec& ni, const arma::vec& ni0, const arma::vec& zeta, const double& bxj, const double& lg_theta, const arma::vec& lbc, const arma::uword& max_iter, const double& eps, const bool& show);
RcppExport SEXP _asSeq2_Rcpp_ase_Pi_BFGS(SEXP niSEXP, SEXP ni0SEXP, SEXP zetaSEXP, SEXP bxjSEXP, SEXP lg_thetaSEXP, SEXP lbcSEXP, SEXP max_iterSEXP, SEXP epsSEXP, SEXP showSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type ni(niSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type ni0(ni0SEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type zeta(zetaSEXP);
    Rcpp::traits::input_parameter< const double& >::type bxj(bxjSEXP);
    Rcpp::traits::input_parameter< const double& >::type lg_theta(lg_thetaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type lbc(lbcSEXP);
    Rcpp::traits::input_parameter< const arma::uword& >::type max_iter(max_iterSEXP);
    Rcpp::traits::input_parameter< const double& >::type eps(epsSEXP);
    Rcpp::traits::input_parameter< const bool& >::type show(showSEXP);
    rcpp_result_gen = Rcpp::wrap(Rcpp_ase_Pi_BFGS(ni, ni0, zeta, bxj, lg_theta, lbc, max_iter, eps, show));
    return rcpp_result_gen;
END_RCPP
}
// Rcpp_ase_BFGS
Rcpp::List Rcpp_ase_BFGS(const arma::vec& ni, const arma::vec& ni0, const arma::vec& zeta, const arma::vec& params0, const arma::vec& lbc, const arma::uword& max_iter, const double& eps, const bool& show);
RcppExport SEXP _asSeq2_Rcpp_ase_BFGS(SEXP niSEXP, SEXP ni0SEXP, SEXP zetaSEXP, SEXP params0SEXP, SEXP lbcSEXP, SEXP max_iterSEXP, SEXP epsSEXP, SEXP showSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type ni(niSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type ni0(ni0SEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type zeta(zetaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type params0(params0SEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type lbc(lbcSEXP);
    Rcpp::traits::input_parameter< const arma::uword& >::type max_iter(max_iterSEXP);
    Rcpp::traits::input_parameter< const double& >::type eps(epsSEXP);
    Rcpp::traits::input_parameter< const bool& >::type show(showSEXP);
    rcpp_result_gen = Rcpp::wrap(Rcpp_ase_BFGS(ni, ni0, zeta, params0, lbc, max_iter, eps, show));
    return rcpp_result_gen;
END_RCPP
}
// Rcpp_ase_theta_BFGS
Rcpp::List Rcpp_ase_theta_BFGS(const arma::vec& ni, const arma::vec& ni0, const arma::vec& zeta, const double& bxj, const double& lg_theta, const arma::vec& lbc, const arma::uword& max_iter, const double& eps, const bool& show);
RcppExport SEXP _asSeq2_Rcpp_ase_theta_BFGS(SEXP niSEXP, SEXP ni0SEXP, SEXP zetaSEXP, SEXP bxjSEXP, SEXP lg_thetaSEXP, SEXP lbcSEXP, SEXP max_iterSEXP, SEXP epsSEXP, SEXP showSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type ni(niSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type ni0(ni0SEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type zeta(zetaSEXP);
    Rcpp::traits::input_parameter< const double& >::type bxj(bxjSEXP);
    Rcpp::traits::input_parameter< const double& >::type lg_theta(lg_thetaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type lbc(lbcSEXP);
    Rcpp::traits::input_parameter< const arma::uword& >::type max_iter(max_iterSEXP);
    Rcpp::traits::input_parameter< const double& >::type eps(epsSEXP);
    Rcpp::traits::input_parameter< const bool& >::type show(showSEXP);
    rcpp_result_gen = Rcpp::wrap(Rcpp_ase_theta_BFGS(ni, ni0, zeta, bxj, lg_theta, lbc, max_iter, eps, show));
    return rcpp_result_gen;
END_RCPP
}
// Rcpp_ase
Rcpp::List Rcpp_ase(const arma::vec& ni, const arma::vec& ni0, const arma::vec& zeta, const arma::vec& lbc, const double& theta0, const double& LL_null_ase, const arma::uword& max_iter, const double& eps, const bool& show);
RcppExport SEXP _asSeq2_Rcpp_ase(SEXP niSEXP, SEXP ni0SEXP, SEXP zetaSEXP, SEXP lbcSEXP, SEXP theta0SEXP, SEXP LL_null_aseSEXP, SEXP max_iterSEXP, SEXP epsSEXP, SEXP showSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type ni(niSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type ni0(ni0SEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type zeta(zetaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type lbc(lbcSEXP);
    Rcpp::traits::input_parameter< const double& >::type theta0(theta0SEXP);
    Rcpp::traits::input_parameter< const double& >::type LL_null_ase(LL_null_aseSEXP);
    Rcpp::traits::input_parameter< const arma::uword& >::type max_iter(max_iterSEXP);
    Rcpp::traits::input_parameter< const double& >::type eps(epsSEXP);
    Rcpp::traits::input_parameter< const bool& >::type show(showSEXP);
    rcpp_result_gen = Rcpp::wrap(Rcpp_ase(ni, ni0, zeta, lbc, theta0, LL_null_ase, max_iter, eps, show));
    return rcpp_result_gen;
END_RCPP
}
// Rcpp_trecase_LL
double Rcpp_trecase_LL(const double& bxj, const arma::vec& y, const arma::mat& X, const arma::vec& z, const arma::vec& BETA, const double& phi, const bool& fam_nb, const arma::vec& lgy1, arma::vec& mu, const arma::vec& ni, const arma::vec& ni0, const double& log_theta, const arma::vec& lbc, const arma::vec& zeta);
RcppExport SEXP _asSeq2_Rcpp_trecase_LL(SEXP bxjSEXP, SEXP ySEXP, SEXP XSEXP, SEXP zSEXP, SEXP BETASEXP, SEXP phiSEXP, SEXP fam_nbSEXP, SEXP lgy1SEXP, SEXP muSEXP, SEXP niSEXP, SEXP ni0SEXP, SEXP log_thetaSEXP, SEXP lbcSEXP, SEXP zetaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const double& >::type bxj(bxjSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type z(zSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type BETA(BETASEXP);
    Rcpp::traits::input_parameter< const double& >::type phi(phiSEXP);
    Rcpp::traits::input_parameter< const bool& >::type fam_nb(fam_nbSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type lgy1(lgy1SEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type mu(muSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type ni(niSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type ni0(ni0SEXP);
    Rcpp::traits::input_parameter< const double& >::type log_theta(log_thetaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type lbc(lbcSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type zeta(zetaSEXP);
    rcpp_result_gen = Rcpp::wrap(Rcpp_trecase_LL(bxj, y, X, z, BETA, phi, fam_nb, lgy1, mu, ni, ni0, log_theta, lbc, zeta));
    return rcpp_result_gen;
END_RCPP
}
// Rcpp_trecase_grad_bxj
double Rcpp_trecase_grad_bxj(const double& bxj, const arma::vec& y, const arma::mat& X, const arma::vec& z, const arma::vec& BETA, const double& phi, const bool& fam_nb, const arma::vec& lgy1, const arma::vec& mu, const arma::vec& ni, const arma::vec& ni0, const double& log_theta, const arma::vec& lbc, const arma::vec& zeta);
RcppExport SEXP _asSeq2_Rcpp_trecase_grad_bxj(SEXP bxjSEXP, SEXP ySEXP, SEXP XSEXP, SEXP zSEXP, SEXP BETASEXP, SEXP phiSEXP, SEXP fam_nbSEXP, SEXP lgy1SEXP, SEXP muSEXP, SEXP niSEXP, SEXP ni0SEXP, SEXP log_thetaSEXP, SEXP lbcSEXP, SEXP zetaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const double& >::type bxj(bxjSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type z(zSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type BETA(BETASEXP);
    Rcpp::traits::input_parameter< const double& >::type phi(phiSEXP);
    Rcpp::traits::input_parameter< const bool& >::type fam_nb(fam_nbSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type lgy1(lgy1SEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type mu(muSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type ni(niSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type ni0(ni0SEXP);
    Rcpp::traits::input_parameter< const double& >::type log_theta(log_thetaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type lbc(lbcSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type zeta(zetaSEXP);
    rcpp_result_gen = Rcpp::wrap(Rcpp_trecase_grad_bxj(bxj, y, X, z, BETA, phi, fam_nb, lgy1, mu, ni, ni0, log_theta, lbc, zeta));
    return rcpp_result_gen;
END_RCPP
}
// Rcpp_trecase_BFGS
Rcpp::List Rcpp_trecase_BFGS(const double& bxj0, const arma::vec& y, const arma::mat& X, const arma::vec& z, const arma::vec& BETA, const double& phi, const bool& fam_nb, const arma::vec& lgy1, const arma::vec& ni, const arma::vec& ni0, const double& log_theta, const arma::vec& lbc, const arma::vec& zeta, const arma::uword& max_iter, const double& eps, const bool& show);
RcppExport SEXP _asSeq2_Rcpp_trecase_BFGS(SEXP bxj0SEXP, SEXP ySEXP, SEXP XSEXP, SEXP zSEXP, SEXP BETASEXP, SEXP phiSEXP, SEXP fam_nbSEXP, SEXP lgy1SEXP, SEXP niSEXP, SEXP ni0SEXP, SEXP log_thetaSEXP, SEXP lbcSEXP, SEXP zetaSEXP, SEXP max_iterSEXP, SEXP epsSEXP, SEXP showSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const double& >::type bxj0(bxj0SEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type z(zSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type BETA(BETASEXP);
    Rcpp::traits::input_parameter< const double& >::type phi(phiSEXP);
    Rcpp::traits::input_parameter< const bool& >::type fam_nb(fam_nbSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type lgy1(lgy1SEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type ni(niSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type ni0(ni0SEXP);
    Rcpp::traits::input_parameter< const double& >::type log_theta(log_thetaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type lbc(lbcSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type zeta(zetaSEXP);
    Rcpp::traits::input_parameter< const arma::uword& >::type max_iter(max_iterSEXP);
    Rcpp::traits::input_parameter< const double& >::type eps(epsSEXP);
    Rcpp::traits::input_parameter< const bool& >::type show(showSEXP);
    rcpp_result_gen = Rcpp::wrap(Rcpp_trecase_BFGS(bxj0, y, X, z, BETA, phi, fam_nb, lgy1, ni, ni0, log_theta, lbc, zeta, max_iter, eps, show));
    return rcpp_result_gen;
END_RCPP
}
// Rcpp_trecase
Rcpp::List Rcpp_trecase(const arma::vec& y, const arma::mat& X, const arma::vec& z, const bool& fam_nb, const arma::vec& lgy1, const arma::vec& ni, const arma::vec& ni0, const arma::vec& zeta, const arma::vec& lbc, const double& ini_bxj, const double& LL_null, Rcpp::Nullable<Rcpp::NumericVector> ini_reg_par, const double& theta0, const double& LL_null_ase, const arma::uword& max_iter, const double& eps, const bool& show);
RcppExport SEXP _asSeq2_Rcpp_trecase(SEXP ySEXP, SEXP XSEXP, SEXP zSEXP, SEXP fam_nbSEXP, SEXP lgy1SEXP, SEXP niSEXP, SEXP ni0SEXP, SEXP zetaSEXP, SEXP lbcSEXP, SEXP ini_bxjSEXP, SEXP LL_nullSEXP, SEXP ini_reg_parSEXP, SEXP theta0SEXP, SEXP LL_null_aseSEXP, SEXP max_iterSEXP, SEXP epsSEXP, SEXP showSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type z(zSEXP);
    Rcpp::traits::input_parameter< const bool& >::type fam_nb(fam_nbSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type lgy1(lgy1SEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type ni(niSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type ni0(ni0SEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type zeta(zetaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type lbc(lbcSEXP);
    Rcpp::traits::input_parameter< const double& >::type ini_bxj(ini_bxjSEXP);
    Rcpp::traits::input_parameter< const double& >::type LL_null(LL_nullSEXP);
    Rcpp::traits::input_parameter< Rcpp::Nullable<Rcpp::NumericVector> >::type ini_reg_par(ini_reg_parSEXP);
    Rcpp::traits::input_parameter< const double& >::type theta0(theta0SEXP);
    Rcpp::traits::input_parameter< const double& >::type LL_null_ase(LL_null_aseSEXP);
    Rcpp::traits::input_parameter< const arma::uword& >::type max_iter(max_iterSEXP);
    Rcpp::traits::input_parameter< const double& >::type eps(epsSEXP);
    Rcpp::traits::input_parameter< const bool& >::type show(showSEXP);
    rcpp_result_gen = Rcpp::wrap(Rcpp_trecase(y, X, z, fam_nb, lgy1, ni, ni0, zeta, lbc, ini_bxj, LL_null, ini_reg_par, theta0, LL_null_ase, max_iter, eps, show));
    return rcpp_result_gen;
END_RCPP
}
// Rcpp_ase_mtest
void Rcpp_ase_mtest(const arma::mat& Y1, const arma::mat& Y2, const arma::mat& Z, const arma::vec& SNP_pos, const arma::uvec& sChr, const arma::vec& gene_start, const arma::vec& gene_end, const arma::uvec& gChr, const char* file_ase, const double& cis_window, const int& min_ASE_total, const int& min_nASE, const int& min_nASE_het, const double& eps, const arma::uword& max_iter, const bool& show);
RcppExport SEXP _asSeq2_Rcpp_ase_mtest(SEXP Y1SEXP, SEXP Y2SEXP, SEXP ZSEXP, SEXP SNP_posSEXP, SEXP sChrSEXP, SEXP gene_startSEXP, SEXP gene_endSEXP, SEXP gChrSEXP, SEXP file_aseSEXP, SEXP cis_windowSEXP, SEXP min_ASE_totalSEXP, SEXP min_nASESEXP, SEXP min_nASE_hetSEXP, SEXP epsSEXP, SEXP max_iterSEXP, SEXP showSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type Y1(Y1SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Y2(Y2SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type SNP_pos(SNP_posSEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type sChr(sChrSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type gene_start(gene_startSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type gene_end(gene_endSEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type gChr(gChrSEXP);
    Rcpp::traits::input_parameter< const char* >::type file_ase(file_aseSEXP);
    Rcpp::traits::input_parameter< const double& >::type cis_window(cis_windowSEXP);
    Rcpp::traits::input_parameter< const int& >::type min_ASE_total(min_ASE_totalSEXP);
    Rcpp::traits::input_parameter< const int& >::type min_nASE(min_nASESEXP);
    Rcpp::traits::input_parameter< const int& >::type min_nASE_het(min_nASE_hetSEXP);
    Rcpp::traits::input_parameter< const double& >::type eps(epsSEXP);
    Rcpp::traits::input_parameter< const arma::uword& >::type max_iter(max_iterSEXP);
    Rcpp::traits::input_parameter< const bool& >::type show(showSEXP);
    Rcpp_ase_mtest(Y1, Y2, Z, SNP_pos, sChr, gene_start, gene_end, gChr, file_ase, cis_window, min_ASE_total, min_nASE, min_nASE_het, eps, max_iter, show);
    return R_NilValue;
END_RCPP
}
// Rcpp_trecase_mtest
void Rcpp_trecase_mtest(const arma::mat& Y, const arma::mat& Y1, const arma::mat& Y2, const arma::mat& Z, const arma::mat& XX, const arma::vec& SNP_pos, const arma::uvec& sChr, const bool& fam_nb, const arma::vec& gene_start, const arma::vec& gene_end, const arma::uvec& gChr, const char* file_trec, const char* file_trecase, const double& cis_window, const bool& useASE, const int& min_ASE_total, const int& min_nASE, const int& min_nASE_het, const double& eps, const arma::uword& max_iter, const bool& show);
RcppExport SEXP _asSeq2_Rcpp_trecase_mtest(SEXP YSEXP, SEXP Y1SEXP, SEXP Y2SEXP, SEXP ZSEXP, SEXP XXSEXP, SEXP SNP_posSEXP, SEXP sChrSEXP, SEXP fam_nbSEXP, SEXP gene_startSEXP, SEXP gene_endSEXP, SEXP gChrSEXP, SEXP file_trecSEXP, SEXP file_trecaseSEXP, SEXP cis_windowSEXP, SEXP useASESEXP, SEXP min_ASE_totalSEXP, SEXP min_nASESEXP, SEXP min_nASE_hetSEXP, SEXP epsSEXP, SEXP max_iterSEXP, SEXP showSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type Y(YSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Y1(Y1SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Y2(Y2SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type XX(XXSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type SNP_pos(SNP_posSEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type sChr(sChrSEXP);
    Rcpp::traits::input_parameter< const bool& >::type fam_nb(fam_nbSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type gene_start(gene_startSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type gene_end(gene_endSEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type gChr(gChrSEXP);
    Rcpp::traits::input_parameter< const char* >::type file_trec(file_trecSEXP);
    Rcpp::traits::input_parameter< const char* >::type file_trecase(file_trecaseSEXP);
    Rcpp::traits::input_parameter< const double& >::type cis_window(cis_windowSEXP);
    Rcpp::traits::input_parameter< const bool& >::type useASE(useASESEXP);
    Rcpp::traits::input_parameter< const int& >::type min_ASE_total(min_ASE_totalSEXP);
    Rcpp::traits::input_parameter< const int& >::type min_nASE(min_nASESEXP);
    Rcpp::traits::input_parameter< const int& >::type min_nASE_het(min_nASE_hetSEXP);
    Rcpp::traits::input_parameter< const double& >::type eps(epsSEXP);
    Rcpp::traits::input_parameter< const arma::uword& >::type max_iter(max_iterSEXP);
    Rcpp::traits::input_parameter< const bool& >::type show(showSEXP);
    Rcpp_trecase_mtest(Y, Y1, Y2, Z, XX, SNP_pos, sChr, fam_nb, gene_start, gene_end, gChr, file_trec, file_trecase, cis_window, useASE, min_ASE_total, min_nASE, min_nASE_het, eps, max_iter, show);
    return R_NilValue;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_asSeq2_Rcpp_norm", (DL_FUNC) &_asSeq2_Rcpp_norm, 1},
    {"_asSeq2_Rcpp_logSumExp", (DL_FUNC) &_asSeq2_Rcpp_logSumExp, 1},
    {"_asSeq2_Rcpp_min_diff", (DL_FUNC) &_asSeq2_Rcpp_min_diff, 1},
    {"_asSeq2_Rcpp_lgy_add_1", (DL_FUNC) &_asSeq2_Rcpp_lgy_add_1, 1},
    {"_asSeq2_compute_offset", (DL_FUNC) &_asSeq2_compute_offset, 3},
    {"_asSeq2_Rcpp_loglikNB", (DL_FUNC) &_asSeq2_Rcpp_loglikNB, 4},
    {"_asSeq2_Rcpp_loglikNB_bxj", (DL_FUNC) &_asSeq2_Rcpp_loglikNB_bxj, 4},
    {"_asSeq2_Rcpp_loglik_pois", (DL_FUNC) &_asSeq2_Rcpp_loglik_pois, 3},
    {"_asSeq2_Rcpp_logLTReC", (DL_FUNC) &_asSeq2_Rcpp_logLTReC, 9},
    {"_asSeq2_Rcpp_logLTReC_bxj", (DL_FUNC) &_asSeq2_Rcpp_logLTReC_bxj, 9},
    {"_asSeq2_Rcpp_grad_hess_bxj_trec", (DL_FUNC) &_asSeq2_Rcpp_grad_hess_bxj_trec, 6},
    {"_asSeq2_Rcpp_trec_grad_bxj", (DL_FUNC) &_asSeq2_Rcpp_trec_grad_bxj, 6},
    {"_asSeq2_Rcpp_trec_bxj_BFGS", (DL_FUNC) &_asSeq2_Rcpp_trec_bxj_BFGS, 11},
    {"_asSeq2_Rcpp_trec_bxj", (DL_FUNC) &_asSeq2_Rcpp_trec_bxj, 11},
    {"_asSeq2_Rcpp_NB_reg_LL", (DL_FUNC) &_asSeq2_Rcpp_NB_reg_LL, 6},
    {"_asSeq2_Rcpp_NB_reg_grad", (DL_FUNC) &_asSeq2_Rcpp_NB_reg_grad, 4},
    {"_asSeq2_Rcpp_NB_reg_Hess", (DL_FUNC) &_asSeq2_Rcpp_NB_reg_Hess, 4},
    {"_asSeq2_Rcpp_pois_reg_LL", (DL_FUNC) &_asSeq2_Rcpp_pois_reg_LL, 6},
    {"_asSeq2_Rcpp_pois_reg_grad", (DL_FUNC) &_asSeq2_Rcpp_pois_reg_grad, 4},
    {"_asSeq2_Rcpp_pois_reg_Hess", (DL_FUNC) &_asSeq2_Rcpp_pois_reg_Hess, 4},
    {"_asSeq2_Rcpp_reg_LL", (DL_FUNC) &_asSeq2_Rcpp_reg_LL, 7},
    {"_asSeq2_Rcpp_reg_grad", (DL_FUNC) &_asSeq2_Rcpp_reg_grad, 5},
    {"_asSeq2_Rcpp_reg_Hess", (DL_FUNC) &_asSeq2_Rcpp_reg_Hess, 5},
    {"_asSeq2_Rcpp_reg", (DL_FUNC) &_asSeq2_Rcpp_reg, 9},
    {"_asSeq2_Rcpp_reg_BFGS", (DL_FUNC) &_asSeq2_Rcpp_reg_BFGS, 9},
    {"_asSeq2_Rcpp_trec", (DL_FUNC) &_asSeq2_Rcpp_trec, 11},
    {"_asSeq2_Rcpp_loglikBB", (DL_FUNC) &_asSeq2_Rcpp_loglikBB, 6},
    {"_asSeq2_Rcpp_loglikBB_Pi", (DL_FUNC) &_asSeq2_Rcpp_loglikBB_Pi, 6},
    {"_asSeq2_Rcpp_ase_grad", (DL_FUNC) &_asSeq2_Rcpp_ase_grad, 5},
    {"_asSeq2_Rcpp_ase_grad_Pi", (DL_FUNC) &_asSeq2_Rcpp_ase_grad_Pi, 5},
    {"_asSeq2_Rcpp_ase_grad_H0", (DL_FUNC) &_asSeq2_Rcpp_ase_grad_H0, 5},
    {"_asSeq2_Rcpp_ase_Pi_BFGS", (DL_FUNC) &_asSeq2_Rcpp_ase_Pi_BFGS, 9},
    {"_asSeq2_Rcpp_ase_BFGS", (DL_FUNC) &_asSeq2_Rcpp_ase_BFGS, 8},
    {"_asSeq2_Rcpp_ase_theta_BFGS", (DL_FUNC) &_asSeq2_Rcpp_ase_theta_BFGS, 9},
    {"_asSeq2_Rcpp_ase", (DL_FUNC) &_asSeq2_Rcpp_ase, 9},
    {"_asSeq2_Rcpp_trecase_LL", (DL_FUNC) &_asSeq2_Rcpp_trecase_LL, 14},
    {"_asSeq2_Rcpp_trecase_grad_bxj", (DL_FUNC) &_asSeq2_Rcpp_trecase_grad_bxj, 14},
    {"_asSeq2_Rcpp_trecase_BFGS", (DL_FUNC) &_asSeq2_Rcpp_trecase_BFGS, 16},
    {"_asSeq2_Rcpp_trecase", (DL_FUNC) &_asSeq2_Rcpp_trecase, 17},
    {"_asSeq2_Rcpp_ase_mtest", (DL_FUNC) &_asSeq2_Rcpp_ase_mtest, 16},
    {"_asSeq2_Rcpp_trecase_mtest", (DL_FUNC) &_asSeq2_Rcpp_trecase_mtest, 21},
    {NULL, NULL, 0}
};

RcppExport void R_init_asSeq2(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
